type Query {
  node(
    """The ID of the object"""
    id: ID!
  ): Node
  mediaTypes(sort: [AssetTypeSortEnum], before: String, after: String, first: Int, last: Int): AssetTypeConnection
  tags(sort: [TagSortEnum], before: String, after: String, first: Int, last: Int): TagConnection
  users(active: Boolean, sort: [UserSortEnum], before: String, after: String, first: Int, last: Int): UserConnection
  media(id: ID, nameLike: String, createdBetween: [Date], fileLocation: String, mediaTypes: [String], owners: [String], stages: [Int], tags: [String], sort: [AssetSortEnum], before: String, after: String, first: Int, last: Int): AssetConnection
  stages(id: ID, nameLike: String, createdBetween: [Date], fileLocation: String, owners: [String], sort: [StageSortEnum], before: String, after: String, first: Int, last: Int): StageConnection
  adminPlayers(id: ID, usernameLike: String, createdBetween: [Date], role: Int, sort: [AdminPlayerSortEnum], before: String, after: String, first: Int, last: Int): AdminPlayerConnection

  """Logged in user info"""
  whoami: User
  notifications: [Notification]
  voices: [Voice]
}

"""An object with an ID"""
interface Node {
  """The ID of the object."""
  id: ID!
}

type AssetTypeConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [AssetTypeEdge]!
}

"""
The Relay compliant `PageInfo` type, containing data necessary to paginate this connection.
"""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

"""A Relay edge containing a `AssetType` and its cursor."""
type AssetTypeEdge {
  """The item at the end of the edge"""
  node: AssetType

  """A cursor for use in pagination"""
  cursor: String!
}

type AssetType implements Node {
  """The ID of the object."""
  id: ID!
  name: String!
  description: String
  fileLocation: String!
  createdOn: DateTime!

  """Database ID"""
  dbId: Int
}

"""
The `DateTime` scalar type represents a DateTime
value as specified by
[iso8601](https://en.wikipedia.org/wiki/ISO_8601).
"""
scalar DateTime

"""An enumeration."""
enum AssetTypeSortEnum {
  ID_ASC
  ID_DESC
  NAME_ASC
  NAME_DESC
  DESCRIPTION_ASC
  DESCRIPTION_DESC
  FILE_LOCATION_ASC
  FILE_LOCATION_DESC
  CREATED_ON_ASC
  CREATED_ON_DESC
}

type TagConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [TagEdge]!
}

"""A Relay edge containing a `Tag` and its cursor."""
type TagEdge {
  """The item at the end of the edge"""
  node: Tag

  """A cursor for use in pagination"""
  cursor: String!
}

type Tag implements Node {
  """The ID of the object."""
  id: ID!
  name: String!
  color: String
  createdOn: DateTime!

  """Database ID"""
  dbId: Int
}

"""An enumeration."""
enum TagSortEnum {
  ID_ASC
  ID_DESC
  NAME_ASC
  NAME_DESC
  COLOR_ASC
  COLOR_DESC
  CREATED_ON_ASC
  CREATED_ON_DESC
}

type UserConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [UserEdge]!
}

"""A Relay edge containing a `User` and its cursor."""
type UserEdge {
  """The item at the end of the edge"""
  node: User

  """A cursor for use in pagination"""
  cursor: String!
}

type User implements Node {
  """The ID of the object."""
  id: ID!
  username: String!
  password: String!
  email: String
  binName: String
  role: Int!
  firstName: String
  lastName: String
  displayName: String
  active: Boolean!
  createdOn: DateTime
  firebasePushnotId: String
  deactivatedOn: DateTime
  uploadLimit: Int
  intro: String
  canSendEmail: Boolean
  lastLogin: DateTime

  """Database ID"""
  dbId: Int

  """Name of the role"""
  roleName: String
}

"""An enumeration."""
enum UserSortEnum {
  ID_ASC
  ID_DESC
  USERNAME_ASC
  USERNAME_DESC
  PASSWORD_ASC
  PASSWORD_DESC
  EMAIL_ASC
  EMAIL_DESC
  BIN_NAME_ASC
  BIN_NAME_DESC
  ROLE_ASC
  ROLE_DESC
  FIRST_NAME_ASC
  FIRST_NAME_DESC
  LAST_NAME_ASC
  LAST_NAME_DESC
  DISPLAY_NAME_ASC
  DISPLAY_NAME_DESC
  ACTIVE_ASC
  ACTIVE_DESC
  CREATED_ON_ASC
  CREATED_ON_DESC
  FIREBASE_PUSHNOT_ID_ASC
  FIREBASE_PUSHNOT_ID_DESC
  DEACTIVATED_ON_ASC
  DEACTIVATED_ON_DESC
  UPLOAD_LIMIT_ASC
  UPLOAD_LIMIT_DESC
  INTRO_ASC
  INTRO_DESC
  CAN_SEND_EMAIL_ASC
  CAN_SEND_EMAIL_DESC
  LAST_LOGIN_ASC
  LAST_LOGIN_DESC
}

type AssetConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [AssetEdge]!
  totalCount: Int
}

"""A Relay edge containing a `Asset` and its cursor."""
type AssetEdge {
  """The item at the end of the edge"""
  node: Asset

  """A cursor for use in pagination"""
  cursor: String!
}

type Asset implements Node {
  """The ID of the object."""
  id: ID!
  name: String!
  assetTypeId: Int!
  ownerId: Int!
  description: String
  fileLocation: String!
  createdOn: DateTime!
  updatedOn: DateTime!
  size: Float!
  copyrightLevel: Int!
  assetType: AssetType
  owner: User

  """Stages that this media is assigned to"""
  stages: [AssignedStage]

  """Media tags"""
  tags: [String]

  """Users who had been granted or acknowledged to use this media"""
  permissions: [AssetUsage]

  """Database ID"""
  dbId: Int

  """Logical path of the media"""
  src: String

  """Permission of the logged in user for this media"""
  privilege: Previlege

  """Stream sign that is required to publish from broadcaster"""
  sign: String
}

type AssignedStage {
  id: Int
  name: String
  url: String
}

type AssetUsage implements Node {
  """The ID of the object."""
  id: ID!
  assetId: Int!
  userId: Int!
  approved: Boolean!
  seen: Boolean!
  note: String
  createdOn: DateTime!
  user: User
  asset: Asset
}

enum Previlege {
  NONE
  OWNER
  APPROVED
  PENDING_APPROVAL
  REQUIRE_APPROVAL
}

"""
The `Date` scalar type represents a Date
value as specified by
[iso8601](https://en.wikipedia.org/wiki/ISO_8601).
"""
scalar Date

"""An enumeration."""
enum AssetSortEnum {
  ID_ASC
  ID_DESC
  NAME_ASC
  NAME_DESC
  ASSET_TYPE_ID_ASC
  ASSET_TYPE_ID_DESC
  OWNER_ID_ASC
  OWNER_ID_DESC
  DESCRIPTION_ASC
  DESCRIPTION_DESC
  FILE_LOCATION_ASC
  FILE_LOCATION_DESC
  CREATED_ON_ASC
  CREATED_ON_DESC
  UPDATED_ON_ASC
  UPDATED_ON_DESC
  SIZE_ASC
  SIZE_DESC
  COPYRIGHT_LEVEL_ASC
  COPYRIGHT_LEVEL_DESC
}

type StageConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [StageEdge]!
  totalCount: Int
}

"""A Relay edge containing a `Stage` and its cursor."""
type StageEdge {
  """The item at the end of the edge"""
  node: Stage

  """A cursor for use in pagination"""
  cursor: String!
}

type Stage implements Node {
  """The ID of the object."""
  id: ID!
  name: String!
  description: String
  ownerId: Int!
  fileLocation: String!
  createdOn: DateTime!
  lastAccess: DateTime
  cover: String
  visibility: String
  status: String
  owner: User
  attributes: [StageAttributes]

  """Database ID"""
  dbId: Int

  """Player access to this stage"""
  permission: String
}

type StageAttributes {
  id: Float!
  stageId: Int!
  name: String!
  description: String!
  createdOn: DateTime!
  stage: Stage
}

"""An enumeration."""
enum StageSortEnum {
  ID_ASC
  ID_DESC
  NAME_ASC
  NAME_DESC
  DESCRIPTION_ASC
  DESCRIPTION_DESC
  OWNER_ID_ASC
  OWNER_ID_DESC
  FILE_LOCATION_ASC
  FILE_LOCATION_DESC
  CREATED_ON_ASC
  CREATED_ON_DESC
  LAST_ACCESS_ASC
  LAST_ACCESS_DESC
}

type AdminPlayerConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [AdminPlayerEdge]!
  totalCount: Int
}

"""A Relay edge containing a `AdminPlayer` and its cursor."""
type AdminPlayerEdge {
  """The item at the end of the edge"""
  node: AdminPlayer

  """A cursor for use in pagination"""
  cursor: String!
}

type AdminPlayer implements Node {
  """The ID of the object."""
  id: ID!
  username: String!
  password: String!
  email: String
  binName: String
  role: Int!
  firstName: String
  lastName: String
  displayName: String
  active: Boolean!
  createdOn: DateTime
  firebasePushnotId: String
  deactivatedOn: DateTime
  uploadLimit: Int
  intro: String
  canSendEmail: Boolean

  """Last login time"""
  lastLogin: DateTime

  """Database ID"""
  dbId: Int

  """Player access to this user"""
  permission: String

  """Name of the role"""
  roleName: String
}

"""An enumeration."""
enum AdminPlayerSortEnum {
  ID_ASC
  ID_DESC
  USERNAME_ASC
  USERNAME_DESC
  PASSWORD_ASC
  PASSWORD_DESC
  EMAIL_ASC
  EMAIL_DESC
  BIN_NAME_ASC
  BIN_NAME_DESC
  ROLE_ASC
  ROLE_DESC
  FIRST_NAME_ASC
  FIRST_NAME_DESC
  LAST_NAME_ASC
  LAST_NAME_DESC
  DISPLAY_NAME_ASC
  DISPLAY_NAME_DESC
  ACTIVE_ASC
  ACTIVE_DESC
  CREATED_ON_ASC
  CREATED_ON_DESC
  FIREBASE_PUSHNOT_ID_ASC
  FIREBASE_PUSHNOT_ID_DESC
  DEACTIVATED_ON_ASC
  DEACTIVATED_ON_DESC
  UPLOAD_LIMIT_ASC
  UPLOAD_LIMIT_DESC
  INTRO_ASC
  INTRO_DESC
  CAN_SEND_EMAIL_ASC
  CAN_SEND_EMAIL_DESC
  LAST_LOGIN_ASC
  LAST_LOGIN_DESC
}

type Notification implements Node {
  """The ID of the object."""
  id: ID!

  """Type of notification"""
  type: NotificationType

  """
  If notification is of type media usage, this object contain the permission request
  """
  mediaUsage: AssetUsage
}

enum NotificationType {
  MEDIA_USAGE
}

type Voice implements Node {
  """The ID of the object."""
  id: ID!

  """The voice"""
  voice: VoiceOutput

  """The avatar owned this voice"""
  avatar: Asset
}

type VoiceOutput {
  """Voice name"""
  voice: String

  """Voice variant"""
  variant: String!

  """Voice pitch, range from 0 to 100"""
  pitch: Int!

  """Voice speed, range from 0 to 350"""
  speed: Int!

  """Voice amplitude, range from 0 to 100"""
  amplitude: Int!
}

type Mutation {
  """Mutation to assign stages to a media."""
  calcSizes: CalcSizes

  """Mutation to delete a media."""
  deleteMedia(
    """Global Id of the asset to be deleted."""
    id: ID!
  ): DeleteMedia

  """Mutation to upload a media."""
  uploadFile(
    """Base64 encoded content of the uploading media"""
    base64: String!

    """Original file name"""
    filename: String!
  ): UploadFile

  """Mutation to upload a media."""
  saveMedia(input: SaveMediaInput!): SaveMedia
  authUser(password: String, username: String): AuthMutation
  refreshUser(refreshToken: String): RefreshMutation

  """Mutation to approve or reject a media usage request"""
  confirmPermission(
    """
    Whether the permission is approved. True for approving, False for rejecting
    """
    approved: Boolean

    """ID of the media usage request"""
    id: ID
  ): ConfirmPermission

  """Mutation to create an asset usage"""
  requestPermission(
    """ID of the media usage request"""
    assetId: ID

    """Note for the media usage request"""
    note: String
  ): RequestPermission

  """Mutation to assign a stage to a media"""
  quickAssignMutation(
    """ID of the media"""
    id: ID

    """ID of the stage"""
    stageId: Int
  ): QuickAssignMutation

  """Mutation to update a stage status attribute."""
  updateStatus(
    """Global Id of the stage."""
    stageId: ID!
  ): UpdateAttributeStatus

  """Mutation to update a stage visibility attribute."""
  updateVisibility(
    """Global Id of the stage."""
    stageId: ID!
  ): UpdateAttributeVisibility

  """Update a user."""
  updateUser(inbound: UpdateUserInput!): UpdateUser
  deleteUser(inbound: DeleteUserInput!): DeleteUser

  """Mutation to create a user."""
  batchUserCreation(stageIds: [Int], users: [BatchUserInput]!): BatchUserCreation

  """Mutation to customise foyer."""
  sendEmail(
    """The bcc recipients of the email. Comma separated."""
    bcc: String

    """The body of the email. HTML is allowed."""
    body: String!

    """The recipients of the email. Comma separated."""
    recipients: String!

    """The subject of the email."""
    subject: String!
  ): SendEmail
  changePassword(inbound: ChangePasswordInput!): ChangePassword
}

"""Mutation to assign stages to a media."""
type CalcSizes {
  """Total calculated sizes"""
  size: Int
}

"""Mutation to delete a media."""
type DeleteMedia {
  success: Boolean
  message: String
}

"""Mutation to upload a media."""
type UploadFile {
  """Uploaded file url"""
  url: String
}

"""Mutation to upload a media."""
type SaveMedia {
  """Media saved by this mutation."""
  asset: Asset
}

"""Arguments to update a stage."""
input SaveMediaInput {
  """Name of the media"""
  name: String!

  """Uploaded url of files"""
  urls: [String]

  """Avatar/prop/backdrop,... default to just a generic media"""
  mediaType: String = "media"

  """ID of the media (for updating)"""
  id: ID

  """Copyright level"""
  copyrightLevel: Int

  """Owner of the media, in case of uploading for someone else"""
  owner: String

  """Users who can access and edit this media"""
  userIds: [Int]

  """Id of stages to be assigned to"""
  stageIds: [Int]

  """Media tags"""
  tags: [String]

  """Width of the media"""
  w: Int

  """Height of the media"""
  h: Int

  """
  It would be useful to have a 'Notes' field on the permissions tab, where i could note the actual copyright owner when it's not me, and other information such as what the image is of, when or where taken, this kind of thing.
  """
  note: String

  """Voice settings"""
  voice: AvatarVoiceInput

  """On click action link"""
  link: LinkInput
}

input AvatarVoiceInput {
  """Voice name"""
  voice: String

  """Voice variant"""
  variant: String!

  """Voice pitch, range from 0 to 100"""
  pitch: Int!

  """Voice speed, range from 0 to 350"""
  speed: Int!

  """Voice amplitude, range from 0 to 100"""
  amplitude: Int!
}

input LinkInput {
  """Link url"""
  url: String!

  """Open in new tab?"""
  blank: Boolean!

  """Link effect"""
  effect: Boolean!
}

type AuthMutation {
  accessToken: String
  refreshToken: String
}

type RefreshMutation {
  newToken: String
}

"""Mutation to approve or reject a media usage request"""
type ConfirmPermission {
  """Success"""
  success: Boolean

  """Reason for why the mutation failed"""
  message: String

  """Permissions that were updated"""
  permissions: [AssetUsage]
}

"""Mutation to create an asset usage"""
type RequestPermission {
  """Success"""
  success: Boolean
}

"""Mutation to assign a stage to a media"""
type QuickAssignMutation {
  """Success"""
  success: Boolean

  """Reason for why the mutation failed"""
  message: String
}

"""Mutation to update a stage status attribute."""
type UpdateAttributeStatus {
  result: String
}

"""Mutation to update a stage visibility attribute."""
type UpdateAttributeVisibility {
  result: String
}

"""Update a user."""
type UpdateUser {
  """User updated by this mutation."""
  user: AdminPlayer
}

"""Arguments to update a user."""
input UpdateUserInput {
  """Username"""
  username: String

  """Password"""
  password: String

  """Email Address"""
  email: String

  """bin_name"""
  binName: String

  """User Role"""
  role: Int

  """First Name"""
  firstName: String

  """Last Name"""
  lastName: String

  """Display Name"""
  displayName: String

  """Active record or not"""
  active: Boolean

  """firebase_pushnot_id"""
  firebasePushnotId: String

  """Maximum file upload size limit, in bytes"""
  uploadLimit: Int

  """Introduction"""
  intro: String

  """Global Id of the user."""
  id: ID!
}

type DeleteUser {
  """Password changed successful or not"""
  success: Boolean
}

"""Arguments to update a user."""
input DeleteUserInput {
  """Username"""
  username: String

  """Password"""
  password: String

  """Email Address"""
  email: String

  """bin_name"""
  binName: String

  """User Role"""
  role: Int

  """First Name"""
  firstName: String

  """Last Name"""
  lastName: String

  """Display Name"""
  displayName: String

  """Active record or not"""
  active: Boolean

  """firebase_pushnot_id"""
  firebasePushnotId: String

  """Maximum file upload size limit, in bytes"""
  uploadLimit: Int

  """Introduction"""
  intro: String

  """Global Id of the user."""
  id: ID!
}

"""Mutation to create a user."""
type BatchUserCreation {
  """Users created by this mutation."""
  users: [AdminPlayer]
}

input BatchUserInput {
  username: String!
  email: String!
  password: String!
}

"""Mutation to customise foyer."""
type SendEmail {
  """True if the config was saved."""
  success: Boolean
}

type ChangePassword {
  """Password changed successful or not"""
  success: Boolean
}

"""Arguments to update a user."""
input ChangePasswordInput {
  """Username"""
  username: String

  """Password"""
  password: String

  """Email Address"""
  email: String

  """bin_name"""
  binName: String

  """User Role"""
  role: Int

  """First Name"""
  firstName: String

  """Last Name"""
  lastName: String

  """Display Name"""
  displayName: String

  """Active record or not"""
  active: Boolean

  """firebase_pushnot_id"""
  firebasePushnotId: String

  """Maximum file upload size limit, in bytes"""
  uploadLimit: Int

  """Introduction"""
  intro: String

  """Global Id of the user."""
  id: ID!
  oldPassword: String!
  newPassword: String!
}